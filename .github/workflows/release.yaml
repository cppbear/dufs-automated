name: Release

on:
  workflow_run:
    workflows: ["Upstream Sync"]
    types:
      - completed
  workflow_dispatch:

jobs:
  check_for_updates:
    name: Check for new commits
    runs-on: ubuntu-latest
    outputs:
      new_commits: ${{ steps.set_result.outputs.result }}

    steps:
      - name: Download sync status artifact
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: sync-status
          run-id: ${{ github.event.workflow_run.id }}

      - name: Set result
        id: set_result
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Triggered by workflow_run. Reading artifact..."
            if [[ -f has_new_commits.txt ]]; then
              result=$(cat has_new_commits.txt)
              echo "Sync result from file was: $result"
              echo "result=$result" >> $GITHUB_OUTPUT
            else
              echo "Artifact 'has_new_commits.txt' not found. Defaulting to false."
              echo "result=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Triggered by workflow_dispatch. Forcing execution."
            echo "result=true" >> $GITHUB_OUTPUT
          fi

  ci:
    name: Run CI
    needs: check_for_updates
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && needs.check_for_updates.outputs.new_commits == 'true')
    uses: ./.github/workflows/ci.yaml

  build:
    name: Build for ${{ matrix.target }}
    needs: [check_for_updates, ci]
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && needs.check_for_updates.outputs.new_commits == 'true')
    permissions:
      contents: read

    strategy:
      matrix:
        include:
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
        - target: aarch64-apple-darwin
          os: macos-latest
        - target: aarch64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-apple-darwin
          os: macos-latest
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
        - target: i686-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
        - target: i686-pc-windows-msvc
          os: windows-latest
        - target: armv7-unknown-linux-musleabihf
          os: ubuntu-latest
          use-cross: true
        - target: arm-unknown-linux-musleabihf
          os: ubuntu-latest
          use-cross: true

    runs-on: ${{matrix.os}}
    env:
      BUILD_CMD: cargo

    steps:
    - uses: actions/checkout@v5
      with:
        ref: 'upstream-main'

    - name: Get version from Cargo.toml
      id: get_version
      shell: bash
      run: |
        version=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Install Stable Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use-cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Overwrite build command env variable
      if: matrix.use-cross
      shell: bash
      run: echo "BUILD_CMD=cross" >> $GITHUB_ENV
  
    - name: Show Version Information (Rust, cargo, GCC)
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - name: Build
      shell: bash
      run: $BUILD_CMD build --locked --release --target ${{ matrix.target }}

    - name: Build Archive
      shell: bash
      id: package
      env:
        target: ${{ matrix.target }}
        version: ${{ steps.get_version.outputs.version }}
      run: |
        set -euxo pipefail

        bin=$(grep '^name =' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
        dist_dir=`pwd`/dist
        name=$bin-$version-$target
        executable=target/$target/release/$bin

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          executable=$executable.exe
        fi

        mkdir $dist_dir
        cp $executable $dist_dir
        cd $dist_dir

        if [[ "$RUNNER_OS" == "Windows" ]]; then
            archive=$dist_dir/$name.zip
            7z a $archive *
            echo "archive=dist/$name.zip" >> $GITHUB_OUTPUT
        else
            archive=$dist_dir/$name.tar.gz
            tar -czf $archive *
            echo "archive=dist/$name.tar.gz" >> $GITHUB_OUTPUT
        fi

    - uses: actions/upload-artifact@v4
      with:
        name: build-asset-${{ matrix.target }}
        path: ${{ steps.package.outputs.archive }}

  release:
    name: Publish to Github Releases
    needs: [check_for_updates, build]
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && needs.check_for_updates.outputs.new_commits == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          ref: 'upstream-main'

      - name: Get commit info
        id: get_commit_info
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "full_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_time=$(git show -s --format=%cd --date=format:%Y.%m.%d-%H%M%S HEAD)" >> $GITHUB_OUTPUT

      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          version=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Update dev-latest tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # Delete the old tag locally and remotely
          git tag -d dev-latest || true
          git push origin --delete dev-latest || true
          # Create and push the new tag at the current commit
          git tag dev-latest
          git push origin dev-latest

      - name: Delete existing release (if any)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view dev-latest > /dev/null 2>&1; then
            echo "Existing release 'dev-latest' found. Deleting it..."
            gh release delete dev-latest --yes
          else
            echo "No existing release 'dev-latest' found. Skipping deletion."
          fi

      - uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Display downloaded files
        run: ls -R release-assets

      - name: Publish Archives
        uses: softprops/action-gh-release@v2
        with:
          tag_name: dev-latest
          name: Development Build v${{ steps.get_version.outputs.version }}
          body: |
            This is an automated build from the `upstream-main` branch.
            **Use with caution for production.**

            Committed: ${{ steps.get_commit_info.outputs.commit_time }}
            Version from Cargo.toml: `${{ steps.get_version.outputs.version }}`
          draft: false
          prerelease: true
          files: release-assets/**/*
